using Grammars;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LabCalculator.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ExcelMAUIApp.Parsing
{
	using Antlr4.Runtime.Misc;
	using Antlr4.Runtime.Tree;
	using IToken = Antlr4.Runtime.IToken;

	/// <summary>
	/// This interface defines a complete generic visitor for a parse tree produced
	/// by <see cref="LabCalculatorParser"/>.
	/// </summary>
	/// <typeparam name="Result">The return type of the visit operation.</typeparam>
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
	[System.CLSCompliant(false)]
	public interface ILabCalculatorVisitor<Result> : IParseTreeVisitor<Result>
	{
		/// <summary>
		/// Visit a parse tree produced by <see cref="LabCalculatorParser.compileUnit"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitCompileUnit([NotNull] LabCalculatorParser.CompileUnitContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>MultiplicativeExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitMultiplicativeExpr([NotNull] LabCalculatorParser.MultiplicativeExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>ExponentialExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitExponentialExpr([NotNull] LabCalculatorParser.ExponentialExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>AdditiveExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitAdditiveExpr([NotNull] LabCalculatorParser.AdditiveExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>NumberExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitNumberExpr([NotNull] LabCalculatorParser.NumberExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>ComparisonExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitComparisonExpr([NotNull] LabCalculatorParser.ComparisonExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>IdentifierExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitIdentifierExpr([NotNull] LabCalculatorParser.IdentifierExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>ParenthesizedExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitParenthesizedExpr([NotNull] LabCalculatorParser.ParenthesizedExprContext context);
		/// <summary>
		/// Visit a parse tree produced by the <c>UnaryExpr</c>
		/// labeled alternative in <see cref="LabCalculatorParser.expression"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitUnaryExpr([NotNull] LabCalculatorParser.UnaryExprContext context);
		/// <summary>
		/// Visit a parse tree produced by <see cref="LabCalculatorParser.comparisonOperator"/>.
		/// </summary>
		/// <param name="context">The parse tree.</param>
		/// <return>The visitor result.</return>
		Result VisitComparisonOperator([NotNull] LabCalculatorParser.ComparisonOperatorContext context);
	}
	// namespace ExcelMAUIApp.Parsing;

	internal class LabCalculatorVisitor : LabCalculatorBaseVisitor<double>
	{
		public override double VisitUnaryExpr(LabCalculatorParser.UnaryExprContext context)
		{
			double value = Visit(context.expression());
			var operatorToken = context.operatorToken;
			if (operatorToken.Type == LabCalculatorParser.SUBTRACT)
			{
				return -value;
			}
			else
			{
				return value;
			}

		}
		public override double VisitExponentialExpr(LabCalculatorParser.ExponentialExprContext context)
		{
			double baseValue = Visit(context.expression(0));
			double exponentValue = Visit(context.expression(1));
			return Math.Pow(baseValue, exponentValue);
		}
		public override double VisitAdditiveExpr(LabCalculatorParser.AdditiveExprContext context)
		{
			double left = Visit(context.expression(0));
			double right = Visit(context.expression(1));

			var operatorToken = context.operatorToken;
			if (operatorToken.Type == LabCalculatorParser.SUBTRACT)
			{
				return left - right;
			}
			else
			{
				return left + right;
			}
		}

		public override double VisitMultiplicativeExpr(LabCalculatorParser.MultiplicativeExprContext context)
		{
			double left = Visit(context.expression(0));
			double right = Visit(context.expression(1));
			var operatorToken = context.operatorToken;
			if (operatorToken.Type == LabCalculatorParser.DIVIDE)
			{
				if (right == 0) throw new DivideByZeroException("Division by zero");
				return left / right;
			}
			else
			{
				return left * right;
			}
		}

		public override double VisitNumberExpr(LabCalculatorParser.NumberExprContext context)
		{
			double a = Convert.ToDouble(context.GetText());
			return a;
		}

		public override double VisitParenthesizedExpr(LabCalculatorParser.ParenthesizedExprContext context)
		{
			return Visit(context.expression());
		}

		public override double VisitIdentifierExpr([NotNull] LabCalculatorParser.IdentifierExprContext context)
		{
			var result = context.GetText();
			var editedCellName = Calculator.sheet.EvaluatingCell;
			var resultCell = Calculator.sheet.Cells[result];
			Calculator.sheet.Cells[editedCellName].linkInCell.Add(result);
			if (Calculator.sheet.HasItself(result))
			{
				throw new System.Exception("Ïîñèëàºòüñÿ ñàìå íà ñåáå");
			}

			if (!resultCell.linkedIn.Contains(editedCellName))
			{
				resultCell.linkedIn.Add(editedCellName);
			}

			return Convert.ToDouble(resultCell.Value);
		}

		public override double VisitComparisonExpr([NotNull] LabCalculatorParser.ComparisonExprContext context)
		{
			double left = Visit(context.expression(0));
			double right = Visit(context.expression(1));

			var operatorToken = context.comparisonOperator().GetText();

			bool result = false;

			if (operatorToken == "=")
			{
				result = left == right;
			}
			else if (operatorToken == "<>")
			{
				result = left != right;
			}
			else if (operatorToken == "<")
			{
				result = left < right;
			}
			else if (operatorToken == ">")
			{
				result = left > right;
			}
			else if (operatorToken == "<=")
			{
				result = left <= right;
			}
			else
			{
				result = left >= right;
			}

			return result ? 1.0 : 0.0;
		}
	}
} 
